<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0">
  <link rel="self" href="http://intertwingly.net/blog/index.atom"/>
  <id>http://intertwingly.net/blog/index.atom</id>
  <icon>../favicon.ico</icon>

  <title>Sam Ruby</title>
  <subtitle>It’s just data</subtitle>
  <author>
    <name>Sam Ruby</name>
    <email>rubys@intertwingly.net</email>
    <uri>/blog/</uri>
  </author>
  <updated>2007-09-30T23:45:27-04:00</updated>
  <link href="/blog/"/>

  <entry>
    <id>tag:intertwingly.net,2004:2686</id>
    <link href="/blog/2007/09/30/Etag-vs-Encoding"/>
    <link rel="replies" href="2686.atom" thr:count="4" thr:updated="2007-09-30T21:58:42-04:00"/>
    <title>Etag vs Encoding</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:8.125em; height:4.8125em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 130 77">
  <path d="M2,12l8-6h11v11l-6,8zM62,12l8-6h11v11l-6,8zM2,62l8-6h11v11l-6,8zM62,62l8-6h11v11l-6,8z" fill="#fe898b"/>
  <path d="M2,12h13v13h-13zM62,12h13v13h-13zM2,62h13v13h-13zM62,62h13v13h-13z" fill="#cb0612"/>

  <path d="M23,12l8-6h29v11l-5,7h-4v9l-6,7zM59,68l-5,6l-30-11l6-7h3v-8l6-5h11v14h9z" fill="#52a9ff"/>
  <path d="M23,12h32v12h-10v16h-12v-16h-10zM54,74h-30v-11h9v-15h12v15h9z" fill="#5c64b5"/>

  <path d="M84,12l8-6c18-4,38,19,34,27l-5,6zM84,63c18,4,38,5,42-21h-12l-5,6c-2,14,-18,10-20,10z" fill="#87f7a2"/>
  <path d="M84,12c20-5,41,15,37,27h-12c0-12-8-15-25-15zM84,75c20,3,41-15,37-27h-12c0,12-8,15-25,15z" fill="#18bf73"/>
</svg></div>
<p>Learn something new every day.</p>
<p>Despite being the way Apache <a href="http://www.imc.org/atom-protocol/mail-archive/msg10397.html">httpd currently behaves</a>, and how <a href="http://www.imc.org/atom-protocol/mail-archive/msg10400.html">I would read the HTTP spec</a> apparently it is the <a href="http://www.imc.org/atom-protocol/mail-archive/msg10399.html">behavior of IIS 7</a> and the <a href="http://issues.apache.org/bugzilla/show_bug.cgi?id=39727">apparent consensus of the Apache httpd developers</a> (including one of the authors of the spec) that a different ETag value should be used if the response is compressed over when it is not.</p></div></content>
    <updated>2007-09-30T13:21:01-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2685</id>
    <link href="/blog/2007/09/29/Up-vs-Out"/>
    <link rel="replies" href="2685.atom" thr:count="3" thr:updated="2007-09-29T13:38:05-04:00"/>
    <title>Up vs Out</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <path d="M0,87s10-5,20,0s10,5,20,0s10-5,20,0s10,5,20,0s10-5,20,0s10,5,20,0" stroke="#00F" fill="none"/>
  <circle cx="70" cy="16" r="7" fill="#000"/>
  <g stroke-linecap="round" stroke-linejoin="round" fill="none" stroke="#000">
  <path d="M48,34l26-3l3,23l-20,6l8,25" stroke-width="9" stroke="#0C0"/>
  <path d="M0,34l48,0"/>
  <path d="M20,75c20,13,50,13,60,12" stroke-width="4"/>
  </g>
</svg></div>
<a href="http://www.allthingsdistributed.com/2007/09/50_x.html"><cite>Werner Vogels</cite></a>: <em>Only focusing on 50X just gives you faster Elephants, not the revolutionary new breeds of animals that can serve us better.</em></div></content>
    <updated>2007-09-29T09:54:10-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2684</id>
    <link href="/blog/2007/09/28/Email-addresses-your-OpenID-via-DNS"/>
    <link rel="replies" href="2684.atom" thr:count="9" thr:updated="2007-09-30T23:45:15-04:00"/>
    <title>Email addresses your OpenID via DNS</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://www.majordojo.com/technology/what_openid_needs.php">Byrne Reese</a>: <em>this is exactly was OpenID needs: Open iDNS, or “Open Id Domain Name System.” This service would work just like DNS, and would map email addresses to an OpenID provider designated by the owner.</em></p>
<p>Looking at Jabber recently caused me to see this prior discussion in a new light.  With <a href="http://www.google.com/talk/">Google Talk</a>, one’s gmail.com email-style address is one’s identity.  I just created a second address, one without a gmail.com account behind it.  And Google Talk and GMail seem to be doing just fine.</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <path d="M43,90c-88,-16,-21,-86,41,-51l9,-6v17h-26l8,-5c-55,-25,-86,29,-32,36z" fill="#ccc"/>
  <path d="M43,90v-75l14,-9v75z" fill="#f60"/>
</svg></div>
<p><a href="http://www.majordojo.com/technology/what_openid_needs.php"><cite>Bernie Reese</cite></a>: <em>this is exactly was OpenID needs: Open iDNS, or “Open Id Domain Name System.” This service would work just like DNS, and would map email addresses to an OpenID provider designated by the owner.</em></p>
<p>Looking at Jabber recently caused me to see this prior discussion in a new light.  With <a href="http://www.google.com/talk/">Google Talk</a>, one’s gmail.com email-style address is one’s identity.  I just created a second address, one without a gmail.com account behind it.  And Google Talk and GMail seem to be doing just fine.</p>
<p>Part of the problem is that the people working on OpenID are concerned about privacy, and the perception is that giving away an email address may be revealing too much.  But as email address can be minted at will, the user is still in full control.  And those that wish to can still use http flavor URIs, so nobody loses.</p>
<p>Another part of the problem is that <a href="http://blog.phpbb.cc/2007/02/08/read-the-spec-jack/">the solution proposed</a> required people to do real work, deploy real software in production, and have to deal with all of the counter-measures designed to stop spammers, etc.</p>
<p>Ironically DNS <a href="http://en.wikipedia.org/wiki/SRV_record">SRV records</a> were dismissed prematurely:</p>
<blockquote class="quote"><p>Although big providers could easily adopt this, others (<b>consumers, mostly</b>) would have to make substantial efforts in order to adjust.  [Emphasis added]
</p></blockquote>
<p>Here’s a version of the consumer side of the code for a fully load balancing solution:</p>
<pre class="code">import DNS, sys, random
DNS.ParseResolvConf()

# resolve _xmpp-server per <a href="http://www.ietf.org/rfc/rfc2782.txt">RFC 2782</a>
for domain in sys.argv[1:]:

  # resolve the service
  request = DNS.Request(qtype='srv')
  response = request.req('<b>_xmpp-server._tcp</b>.%s.' % domain)
  services = [service['data'] for service in response.answers]

  # choose services with the highest priority
  services.sort()
  services = [service for service in services if service[0]==services[0][0]]

  # make a weighted choice amongst these services
  random.shuffle(services)
  choice = sum([service[1] for service in services]) * random.random()
  for service in services:
    choice -= service[1]
    if choice &lt;= 0:
      print "%s:\t%s:%d" % (domain, service[-1], service[-2])
      break
  else:
    print "%s:\t&lt;none&gt;" % domain</pre>
<p>Try it against <code>gmail.com</code> to see how it works.</p>
<p>DNS records are already distributed and cached, so after the first request there would be little to no noticeable latency.  The software is already deployed.  People could update SRV records without needing to wait for clients to be deployed, and clients could start checking for this without waiting for people to update SRV records.</p></div></content>
    <updated>2007-09-28T14:34:26-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2683</id>
    <link href="/blog/2007/09/27/Comment-Notification-via-XMPP"/>
    <link rel="replies" href="2683.atom" thr:count="34" thr:updated="2007-09-29T11:03:38-04:00"/>
    <title>Comment Notification via XMPP</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://intertwingly.net/blog/2007/09/25/JSON-for-Map-Reduce#c1190757323">Elias Torres</a>: <em>Sam could you add Jabber notifications to the email in the comment form when a new comment has been posted to entry? pleeeeeeeeeeaase.</em></p>
<p>OK, I’ve added a <a href="http://intertwingly.net/registry/">Register</a> entry to the Nav Bar on the right.  It will allow you to specify your preferences, but I haven’t yet connected it to <a href="http://www.xmpp.org/">XMPP</a>.</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:5.0em; height:7.5em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 120">
  <path d="M9,15c-1,21,4,11,6,9c10-15,48-6,53,12c14,38-30,30-23,67c1,1,3,2,4-1c-10-29,44-25,22-70c-10-29-52-27-62-17z
M18,80c5,6,13,9,20,6c3-1,3,1,2,3c-5,3-20,2-26-5c-5-5,0-12,4-4z
M18,92c5,3,9,5,18,5c7-2,6,3,2,4c-5,2-20-3-22-6c-10-6-7-11,2-3z
M18,103c5,3,15,7,20,4c5-3,7-1,2,2c-5,5-21,2-26-3c-8-5-3-13,4-3z" fill="#C00"/>
  <path d="M20,64c-1-13,9-15,12-6c5-5,20-8,6,13c-3,5-5,4-4-1c13-15,2-13-3-8c-1-11-9-7-7,2c1,7-2,7-4,0z" fill="#fb0"/>
</svg></div>
<p><a href="http://intertwingly.net/blog/2007/09/25/JSON-for-Map-Reduce#c1190757323"><cite>Elias Torres</cite></a>: <em>Sam could you add Jabber notifications to the email in the comment form when a new comment has been posted to entry? pleeeeeeeeeeaase.</em></p>
<p>OK, I’ve added a <a href="http://intertwingly.net/registry/">Register</a> entry to the Nav Bar on the right.  It will allow you to specify your preferences, but I haven’t yet connected it to <a href="http://www.xmpp.org/">XMPP</a>.</p>
<ul>
<li>This service, once available, will only be offered to people who can authenticate with <a href="http://openid.net/">OpenID</a>.  I have no interest in maintaining a list of passwords or dealing with password recovery issues.</li>
<li>While the information in the form will be initially seeded with your remembered comment name, email, and URI (if available), the registration information is completely separate and can be changed independently.</li>
<li>To send a message, I need to know the XMPP server and the destination resource.  To keep this simple, I’m going to try to infer the server from the XMPP address specified, defaulting to <a href="http://www.google.com/talk/">Google Talk</a>.</li>
</ul>

<p>That’s pretty much it.  The registration panel is live in that it will capture and display your preferences, but again, at the present time no XMPP messages are generated until I am comfortable that the registration is debugged.</p>
<p>My goal is to keep this simple.  If you are looking at a page, three mouse clicks and you can be subscribed (it may take more based on your OpenID provider).  One subscription list per OpenID.  You can subscribe to all comments, just the entries that you have commented on, or add subscriptions to any of the ten most recently posted or commented on entries.</p>
<p>As an aside, this deceptively simple form has lots of combinations to deal with: new user vs returning user, GET vs POST, cookies available or not, unauthenticated user vs failed authentication vs fully authenticated user vs previously authenticated user whose authentication has timed out.  If you find some combination that doesn’t work as you would expect, let me know.</p></div></content>
    <updated>2007-09-27T08:38:46-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2682</id>
    <link href="/blog/2007/09/26/Rails-Application-Deployed-by-IBM"/>
    <link rel="replies" href="2682.atom" thr:count="7" thr:updated="2007-09-30T13:45:28-04:00"/>
    <title>Rails Application Deployed by... IBM</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:9.25em; height:4.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 148 68">
<g transform="scale(0.1578)">
<polyline fill="#5C7DB8" points="851.165,24.442 713.147,24.442 721.839,0.012 851.165,0.012 851.165,24.442 "/>
<path fill="#5C7DB8" d="M473.454,0.012L601.34,0l8.59,24.487c0.056-0.034-136.431,0.034-136.431,0S473.421,0.012,473.454,0.012"/>
<path fill="#5C7DB8" d="M368.987,0.012c21.684,2.088,40.531,9.811,56.585,24.476c0,0-238.443,0.022-238.443,0
    c0-0.034,0-24.487,0-24.487L368.987,0.012"/>
<rect x="0.024" y="0.006" fill="#5C7DB8" width="165.646" height="24.425"/>
<path fill="#5C7DB8" d="M851.165,70.281H697.104c0,0,8.478-24.301,8.433-24.319h145.628V70.281"/>
<polyline fill="#5C7DB8" points="626.222,70.304 473.454,70.304 473.454,45.962 617.563,45.962 626.222,70.304 "/>
<path fill="#5C7DB8" d="M444.138,45.952c3.142,8.027,6.867,14.895,6.867,24.318H187.174V45.952H444.138"/>
<rect x="0.024" y="45.962" fill="#5C7DB8" width="165.646" height="24.307"/>
<path fill="#5C7DB8" d="M689.382,91.801l-8.546,24.42h123.438c0.057-0.056-0.033-24.38,0-24.38L689.382,91.801"/>
<polyline fill="#5C7DB8" points="633.843,91.791 642.467,116.221 520.11,116.221 520.11,91.791 633.843,91.791 "/>
<path fill="#5C7DB8" d="M453.099,91.791c0,8.381-1.047,17.096-3.489,24.431h-72.246V91.791H453.099"/>

<rect x="46.196" y="91.908" fill="#5C7DB8" width="71.188" height="24.313"/>
<rect x="235.101" y="91.791" fill="#5C7DB8" width="71.075" height="24.431"/>
<path fill="#5C7DB8" d="M673.45,136.813h130.823v24.312h-69.668c0,0.197-0.034-18.526-0.034-18.526s-6.45,18.481-6.462,18.526
    h-62.776L673.45,136.813"/>
<path fill="#5C7DB8" d="M590.002,142.577c0,0,0.012,18.503,0,18.548H520.11v-24.312h129.573l8.703,24.312c0,0-61.889,0.046-61.889,0
    L590.002,142.577"/>
<path fill="#5C7DB8" d="M235.101,136.802h204.038c-4.459,8.14-12.564,18.042-20.242,24.324c0,0-183.795,0.023-183.795,0
    C235.101,161.081,235.101,136.857,235.101,136.802"/>
<rect x="46.196" y="136.802" fill="#5C7DB8" width="71.188" height="24.313"/>
<rect x="734.605" y="182.641" fill="#5C7DB8" width="69.668" height="24.318"/>
<path fill="#5C7DB8" d="M590.002,182.641H520.11v24.318c-0.056-0.022,69.903,0,69.903,0
    C590.014,206.937,590.092,182.641,590.002,182.641"/>
<path fill="#5C7DB8" d="M720.544,182.641c-0.326-0.023-8.162,24.296-8.5,24.318l-99.232,0.044
    c-0.09-0.044-8.736-24.386-8.736-24.362H720.544"/>
<path fill="#5C7DB8" d="M235.09,182.641h183.458c8.376,6.98,15.93,15.582,21.874,24.318c0.327-0.022-205.321,0-205.321,0
    C235.101,206.937,235.09,182.674,235.09,182.641"/>
<path fill="#5C7DB8" d="M117.383,206.959v-24.318H46.309c0,0,0.011,24.296,0,24.296C46.297,206.937,117.337,206.959,117.383,206.959
    "/>
<rect x="734.605" y="228.475" fill="#5C7DB8" width="69.668" height="24.318"/>
<rect x="520.087" y="228.484" fill="#5C7DB8" width="69.915" height="24.309"/>
<path fill="#5C7DB8" d="M695.754,252.905c0.012-0.102,8.59-24.454,8.724-24.431h-84.359c-0.158-0.012,8.646,24.329,8.646,24.329
    S695.742,252.995,695.754,252.905"/>
<path fill="#5C7DB8" d="M235.101,252.781c0,0.101-0.011-24.307-0.011-24.307h72.134c0,0,0.056,24.329,0,24.329
    C307.156,252.804,235.101,252.77,235.101,252.781"/>
<path fill="#5C7DB8" d="M450.544,228.475c3.479,7.329,3.838,16.042,4.526,24.431h-76.423v-24.431H450.544"/>
<rect x="46.309" y="228.463" fill="#5C7DB8" width="71.075" height="24.318"/>

<rect x="734.605" y="273.361" fill="#5C7DB8" width="116.548" height="24.318"/>
<rect x="473.454" y="273.361" fill="#5C7DB8" width="116.548" height="24.318"/>
<polyline fill="#5C7DB8" points="680.082,297.68 644.492,297.68 635.958,273.361 688.311,273.361 680.082,297.68 "/>
<path fill="#5C7DB8" d="M0.013,273.361v24.318h165.522c0.079,0.045-0.068-24.296,0-24.296
    C165.614,273.384-0.189,273.361,0.013,273.361"/>
<path fill="#5C7DB8" d="M452.052,273.361c-1.745,8.038-3.344,17.812-9.197,24.318h-2.195H187.163v-24.318H452.052"/>
<polyline fill="#5C7DB8" points="663.948,343.581 660.672,343.581 652.363,319.205 672.481,319.205 663.948,343.581 "/>
<rect x="734.605" y="319.205" fill="#5C7DB8" width="116.548" height="24.432"/>
<path fill="#5C7DB8" d="M187.129,343.581v-24.342c0,0,239.153,0.035,239.84,0.035c-16.055,15.355-38.088,24.014-61.809,24.362
    l-177.997-0.046"/>
<rect x="473.454" y="319.205" fill="#5C7DB8" width="116.548" height="24.432"/>
<path fill="#5C7DB8" d="M165.536,319.318c0,0-0.068,24.263,0,24.263c0.079,0-165.478,0.1-165.522,0.044
    c-0.045-0.044,0.045-24.386,0-24.386C-0.032,319.239,165.468,319.386,165.536,319.318"/>
</g>
</svg></div>
<p><a href="http://money.cnn.com/news/newsfeeds/articles/marketwire/0307170.htm"><cite>CNN</cite></a>: <em>The <a title="National Museum of African American History and Culture" href="http://www.nmaahc.si.edu/">NMAAHC</a> is the first museum website to partake fully of the Web 2.0 social computing revolution. The site is based on cutting-edge, open source programming frameworks such as <b>Ruby on Rails</b> for collaborative website development. It employs concepts such as tags, or keywords, created by the users to help organize the content. As a result, the Museum on the Web is an example of the bottoms-up web, meaning it’s both a product of a site visitor’s participation, and an enabler of creating a community for them. The site runs on IBM System X web and database servers.</em></p>
<p>Emphasis added.</p></div></content>
    <updated>2007-09-26T11:47:06-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2681</id>
    <link href="/blog/2007/09/25/Wordpress-Atom-Futures"/>
    <link rel="replies" href="2681.atom" thr:count="6" thr:updated="2007-09-25T17:08:56-04:00"/>
    <title>Wordpress Atom Futures</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://wordpress.org/development/2007/09/wordpress-23/">Matthew Mullenweg</a>: <em>I’m thrilled to announce that Version 2.3 “Dexter” of WordPress is <a href="http://wordpress.org/download/">now ready for the world</a> ... if you’re a developer you’ll be interested in: 1. Full and complete Atom 1.0 support, including the publishing protocol.</em></p>
<p>It certainly is a dramatic improvement.  And it was fun to be a part of the process.  But full and complete?</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <circle cx="50" cy="50" r="49"/>
  <circle cx="50" cy="50" r="44" stroke="#FFF" stroke-width="5"/>
  <path d="M71,27a7,7 0,0,1 7-7c7,0,9,14,7,21l-16,48h-5l-13-36l-13,36h-5l-21-59h12l15,45l10-28l-6-17h12l15,45l8-24c2-12-8-18-7-25" fill="#FFF"/>
  <path d="M11,29h18 M38,29h22" stroke-width="3" stroke="#FFF" stroke-linecap="round"/>
</svg></div>
<p><a href="http://wordpress.org/development/2007/09/wordpress-23/"><cite>Matthew Mullenweg</cite></a>: <em>I’m thrilled to announce that Version 2.3 “Dexter” of WordPress is <a href="http://wordpress.org/download/">now ready for the world</a> ... if you’re a developer you’ll be interested in: 1. Full and complete Atom 1.0 support, including the publishing protocol.</em></p>
<p>It certainly is a dramatic improvement.  And it was fun to be a part of the process.  But full and complete?</p>
<p>From the format side, I’d like to see support for a feature you see on the <a href="http://codex.wordpress.org/Main_Page">WordPress Codex</a>.  Namely a checkbox that says “This is a minor edit”.  Such a feature could reduce the amount of times an entry show up your feed reader after somebody goes back to fix a few typos.</p>
<p>On the protocol side, I’d like to see support for <a href="http://codex.wordpress.org/AtomPub#Foreign_Markup">foreign markup</a>.</p>
<p>Internally, I’d like to see a little code cleanup.  Atom entries are produced in two places, and consumed in two places.  It would be nice to consolidate this a bit.</p></div></content>
    <updated>2007-09-25T07:01:54-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2680</id>
    <link href="/blog/2007/09/25/JSON-for-Map-Reduce"/>
    <link rel="replies" href="2680.atom" thr:count="24" thr:updated="2007-09-30T16:15:14-04:00"/>
    <title>JSON for Map/Reduce</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://www.snellspace.com/wp/?p=759">James Snell</a>: <em><a href="http://incubator.apache.org/abdera">Abdera</a> has always included the ability to serialize Atom entries to JSON. The mapping, however, was not all that ideal. So I rewrote it. The new serialization is VERY verbose but covers extensions, provides better handling of XHTML content, etc. I ran my initial try by Sam Ruby who offered some suggested refinements and I made some changes. The new output is demonstrated <a href="http://www.snellspace.com/public/atom2json.txt">here</a> (a json serialization of Sam Ruby’s blog feed). The formatting is very rough, which I’ll be working to fix up, but you should be able to get the basic idea.</em></p>
<p>Based on the <a href="http://www.snellspace.com/wp/?p=759#comments">comments</a>, Patrick and Elias do not seem amused.  Guys, I’ve got a use case in mind, and I wonder if you wouldn’t mind helping me?</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.375em; float:right"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xl="http://www.w3.org/1999/xlink" viewBox="0 0 100 102">
  <radialGradient id="jsongrad" cx="65" cy="90" r="100" gradientUnits="userSpaceOnUse"><stop stop-color="#EEF"/><stop offset="1"/></radialGradient>
  <path d="M61,02 A 49,49 0,0,0 39,99 C 9,79 10,24 45,25 C 72,24 65,75 50,75 C 93,79 91,21 62,02" id="jsonswirl" fill="url(#jsongrad)"/>
  <use xl:href="#jsonswirl" transform="translate(50,50) rotate(180) translate(-50,-50)"/>
  <g transform="scale(2) translate(25,25)" fill="none">
    <ellipse stroke="#66899a" rx="3" ry="22"/>
    <ellipse stroke="#e1d85d" rx="3" ry="22" transform="rotate(-66)"/>
    <ellipse stroke="#80a3cf" rx="3" ry="22" transform="rotate(66)"/>
    <circle fill="#80a3cf" r="6.5" stroke="#FFF"/>
 </g>
</svg></div>
<p><a href="http://www.snellspace.com/wp/?p=759"><cite>James Snell</cite></a>: <em><a href="http://incubator.apache.org/abdera">Abdera</a> has always included the ability to serialize Atom entries to JSON. The mapping, however, was not all that ideal. So I rewrote it. The new serialization is VERY verbose but covers extensions, provides better handling of XHTML content, etc. I ran my initial try by Sam Ruby who offered some suggested refinements and I made some changes. The new output is demonstrated <a href="http://www.snellspace.com/public/atom2json.txt">here</a> (a json serialization of Sam Ruby’s blog feed). The formatting is very rough, which I’ll be working to fix up, but you should be able to get the basic idea.</em></p>
<p>Based on the <a href="http://www.snellspace.com/wp/?p=759#comments">comments</a>, Patrick and Elias do not seem amused.  Guys, I’ve got a use case in mind, and I wonder if you wouldn’t mind helping me?</p>
<p>Imagine I have a database designed from the ground up for JSON.  One where incremental map/reduce jobs replace queries.  The data I plan to put in that database is from feeds: RSS 1.0, RSS 2.0, Atom 0.3, whatever; I don’t care.  With the components that go into Venus (<a href="http://feedparser.org/docs/">UFP</a>, <a href="http://code.google.com/p/html5lib/">HTML5LIB</a>, and <a href="http://www.intertwingly.net/code/venus/docs/normalization.html">reconstitute</a>) I can do a LOT of normalization.  Which is good, because I’d like to do all the normalization I can once, so that the subsequent map/reduce tasks can focus on more on the problem they are trying to solve and less on the syntax.</p>
<p>The map/reduce jobs will typically be written in JavaScript.  By that I mean what you get when you apt-get install <a href="http://packages.ubuntu.com/feisty/interpreters/spidermonkey-bin">spidermonkey-bin</a> and run from the command line, and not what you get whey you run within Firefox.  If you like, other languages could be substituted, if a strong enough case could be made.</p>
<p>The set of potential microformats is unbounded.  I’d like to be ready to handle microformats that haven’t been invented yet.  But to provide some specifics to this use case, lets consider <a href="http://microformats.org/wiki/hcalendar">hCalendar</a>.  It contains dates and locations.</p>
<p>First, do all three of you agree that this is a reasonable use case?  If so, what would the ideal JSON format be for this case?  Remember, I’m willing to throw virtually unlimited resources at the one time pre-normalization step in the hopes that such efforts can help shave microseconds off of subsequent map tasks.</p>
<p>Again, to keep this grounded, try to sketch out the code for the map task.  Input is a <code>key</code> and a single JSON document, output is an array of <code>[[dtstart, dtend, location], key]</code>.  I don’t care if the locations were originally in summary, content, description, content:encoded, or even title elements, I simply want the data.</p></div></content>
    <updated>2007-09-25T06:37:15-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2679</id>
    <link href="/blog/2007/09/24/Tests-Id-Like-CouchDB-to-Pass"/>
    <link rel="replies" href="2679.atom" thr:count="6" thr:updated="2007-09-26T07:15:39-04:00"/>
    <title>Tests I’d Like CouchDB to Pass</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Basura, other than being a piece of trash, is starting to get functional.  While it doesn’t yet pass all the <a href="http://couchdb.googlecode.com/svn/trunk/dist/common/ht_utils/couch_tests.js">CouchDB tests</a>, it does pass <a href="http://www.intertwingly.net/code/basura/httptest.erl">some tests that I’d like to see CouchDB pass</a>.  These tests are the subject of this post.</div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <circle stroke-width="12" r="43" cx="50" cy="50" fill="none" stroke="#3A5"/>
  <circle r="6" cx="59" cy="23" fill="#000"/>
  <g stroke-linejoin="round" stroke-linecap="round" stroke-width="1" stroke="#000" fill="none">
    <path d="M36,36c5,0,3,2,8-1c1,2,1,3,3,2c3,0-6,7-3,8c-4-2-9,2-14-2c4-3,4-4,5-7c5,0,8,2,12,1"/>
    <path fill="#000" d="M34,29h31c2,5,7,10,7,16l-8,1l8,1l-3,31l-5,-18l-11,18l5-34l-3-8z"/>
    <path stroke-width="2" d="M27,48h23M28,49h21l-3,28h-14l-4,-28h5l3,28h3v-28h5l-2,28m3-4h-13m-1-5h16m0-5h-16m-1-5h18m0-5h-19"/>
  </g>
  <path stroke="#F00" stroke-width="1"/>
</svg></div>
<p>First an update on Basura, as reported by the <a href="http://couchdb.googlecode.com/svn/trunk/dist/common/ht_utils/couch_tests.js">couch_tests.js</a>:</p>
<p>Test passing:</p>
<ul>
<li>Testing basic functionality</li>
<li>Testing conflicts</li>
<li>Testing lots of docs</li>
<li>Testing multiple rows</li>
<li>Testing utf8</li>
</ul>

<p>Tests yet to pass (or some cases, even attempted):</p>
<ul>
<li>Testing design documents</li>
<li>Testing attachments</li>
<li>Testing view collation</li>
</ul>

<p>So, Basura, other than being a piece of trash, is starting to get functional.  While it doesn’t yet pass all the CouchDB tests, it does pass <a href="http://www.intertwingly.net/code/basura/httptest.erl">some tests that I’d like to see CouchDB pass</a>.  These tests are the subject of this post.</p>
<h3 id="zlib">Content Encoding Tests</h3>
<p>This is real low hanging fruit.  JSON can be a <a href="http://www.snellspace.com/wp/?p=759">mildly verbose</a> text based format, and therefore is amenable to standard compression techniques.  In the HTTP GET case, this can be implemented without affecting any existing clients.  The way it works is that the user agent indicated, via an <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3">Accept-Encoding</a> header what types of compression techniques it supports, and the server sends back a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11">Content-Encoding</a> header with its response indicating which compression method it chose.  In the default case, neither sends such a header, and the data is sent back uncompressed.</p>
<p>As an indication of how transparent and widespread this is, <a href="http://developer.mozilla.org/en/docs/XMLHttpRequest">XMLHttpRequest</a> on Firefox handles this automatically, which means that the <code>couch_tests.html</code> now run compressed.  Yea!</p>
<p>Neither the server support nor the unit tests for compression on PUT and POST are implemented yet.  As this involves compression of the requests themselves, it is a bit presumptuous for clients to assume that the server supports the compression technique chosen, so this technique is less often used in the wild.  Still, this should ultimately be implemented as there likely will be some clients that would trade off a bit of coupling for bandwidth savings.</p>
<h3 id="conneg">Content Negotiation Tests</h3>
<p>This feature is of less value, but it takes virtually nothing to implement.</p>
<p>HTTP, as a protocol, is not based on the presumption that clients and servers must be layered similarly in order to meaningfully interact.  To the contrary, any given server should be able to interact with a wide range of user agents.</p>
<p>A generic application, like a browser, may not understand a given data format.  Firefox, for example, currently handles <code>application/xml</code> automatically, but does not handle <code>application/json</code>.  For such an application, sending responses as <code>text/plain</code> may help with debugging.</p>
<p>A <a href="http://www.couchdbwiki.com/index.php?title=Main_Page">CouchDB specific library</a> already “knows” what data format it is expecting, and needs no additional hints.  For such applications, the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> may not matter much.</p>
<p>A generic URI library may be able to provide additional value add if it knows the content type it is dealing with.  For example, with JSON, it could pre-load the data.</p>
<p>The way this is supposed to work is similar to the <code>Accept-Encoding</code> header above: an <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">Accept</a> header is sent indicating what content types are supported and preferred, and the server can use this information to adjust its response.</p>
<p>Again, the sole purpose of such a feature is to enable serendipity.  If/when a browser comes out that supports JSON to the same level that modern browsers support XML, Basura will be ready.  Additionally, Basura specific libraries (ha!) could use this information as a sanity check of responses before attempting to JSON decode them.  Yes, some mis-configured servers have been known to send back <code>200 OK</code> responses with associated text that contradicts this status.  Checking the <code>Content-Type</code> of the response doesn’t absolutely guarantee anything, but it does tend to increase the amount of number of times that a library can produce a more meaningful error message.</p>
<h3 id="etag">Conditional Processing Tests</h3>
<p>This feature can potentially produce the biggest benefit, though it will require a bit of a change to the existing CouchDB interfaces.  Hopefully it is early enough in the development that these changes can be considered.</p>
<p>As with everything else HTTP related, it involves exposing a bit more metadata in HTTP headers.</p>
<p>For starters, there is an <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19">ETag</a> which is a string that is guaranteed to change every time the resource does.  CouchDB revision IDs are perfect for this.  As an aside, clients are discouraged from making any assumptions about the values of ETags.  For this reason, a case could be made for “lightly encoding” (say, ROT13 or equivalent?) these values.  On the other hand, exposing the revision IDs in this matter makes debugging a bit easier.</p>
<p>Secondly, there is a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29">Last-Modified</a> header that can be used for basically this same purpose.  Given its granularity of a second, It is inferior to ETags but as some clients are happy enough with it, servers should support it.</p>
<p>These two values can be combined with a variety of headers to essentially assert a number of preconditions: <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24">If-Match</a>, <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25">If-Modified-Since</a>, <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26">If-None-Match</a>, and <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.28">If-Unmodified-Since</a>.</p>
<p>The big benefit that is available to all is that GET can return <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5">304 Not Modified</a>.  This can significantly reduce bandwidth on resources that are mercilessly polled.  Furthermore, if the Etag value is chosen so that its currency can be determined entirely by the index, both CPU and memory usage can be reduced.</p>
<p>A secondary benefit that will only accrue to some, but by adhering to <a href="http://www.w3.org/1999/04/Editing/">standards</a>, people who build on libraries that implement those standards will have less code to write.  As code that deals with concurrency issues tends to be error prone, this can be a big win.</p>
<p><a href="http://www.intertwingly.net/code/basura/lostupdate.py">lostupdate.py</a> is an example using <a href="http://code.google.com/p/httplib2/">httplib2</a>.</p></div></content>
    <updated>2007-09-24T14:20:05-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2678</id>
    <link href="/blog/2007/09/21/JSON-Interop"/>
    <link rel="replies" href="2678.atom" thr:count="7" thr:updated="2007-09-25T11:28:07-04:00"/>
    <title>JSON Interop</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Python’s simplejson, in an apparent attempt to avoid Unicode issues, defaults to encoding all non-ASCII characters using JSON’s <code>\uXXXX</code> syntax.</div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.375em; float:right"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xl="http://www.w3.org/1999/xlink" viewBox="0 0 100 102">
  <radialGradient id="jsongrad" cx="65" cy="90" r="100" gradientUnits="userSpaceOnUse"><stop stop-color="#EEF"/><stop offset="1"/></radialGradient>
  <path d="M61,02 A 49,49 0,0,0 39,98 C 9,79 10,24 45,25 C 72,24 65,75 50,75 C 93,79 91,21 62,02" id="jsonswirl" fill="url(#jsongrad)"/>
  <use xl:href="#jsonswirl" transform="translate(50,50) rotate(180) translate(-50,-50)"/>
</svg></div>
<p>Python’s <a href="http://cheeseshop.python.org/pypi/simplejson">simplejson</a>, in an apparent attempt to avoid Unicode issues, defaults to encoding all non-ASCII characters using JSON’s <code>\uXXXX</code> syntax.  Ironically, this causes problems with, of all languages, JavaScript:</p>
<pre class="code">$ <a href="http://packages.ubuntu.com/feisty/interpreters/spidermonkey-bin">js</a>
js&gt; load('<a href="http://www.json.org/js.html">json.js</a>')
js&gt; print("\u263A".toJSONString());
":"
js&gt; print(unescape(encodeURIComponent("\u263A".toJSONString())));
"☺"</pre>
<p>The second, <a href="http://ecmanaut.blogspot.com/2006_07_11_archive.html">rather unobvious combination</a>, converts Unicode to utf-8 and produces the correct result.  A workaround on the Python side would be:</p>
<pre class="code">$ python
&gt;&gt;&gt; import simplejson
&gt;&gt;&gt; simplejson.dumps("\u263A",ensure_ascii=False).encode('utf-8')
'"\xe2\x80\x99"'</pre>
<p><b>Update</b>: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=397215">bug 397215</a> has been opened on the SpiderMonkey shell, and a compile time switch is already available to handle UTF-8 correctly.  See the comments for details</p></div></content>
    <published>2007-09-21T23:11:12-04:00</published>
    <updated>2007-09-25T12:58:22-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2677</id>
    <link href="/blog/2007/09/20/UUID-to-Last-Modified"/>
    <link rel="replies" href="2677.atom" thr:count="8" thr:updated="2007-09-21T00:22:25-04:00"/>
    <title>UUID to Last-Modified</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g transform="translate(50,50)">
    <path d="M38,-1h12v2h-12zM-38-1h-12v2h12z"/>
    <path d="M40,-1h8v2h-8zM-40-1h-8v2h8z" transform="rotate(30)"/>
    <path d="M40,-1h8v2h-8zM-40-1h-8v2h8z" transform="rotate(60)"/>
    <path d="M38,-1h12v2h-12zM-38-1h-12v2h12z" transform="rotate(90)"/>
    <path d="M40,-1h8v2h-8zM-40-1h-8v2h8z" transform="rotate(120)"/>
    <path d="M40,-1h8v2h-8zM-40-1h-8v2h8z" transform="rotate(150)"/>
    <path d="M-0.5,0v-35h1v35z"/>
    <path d="M0,-0.75h30v1.5h-30z"/>
    <path d="M0,-0.75h30v1.5h-30z" transform="rotate(-30)" fill="#888"/>
    <path d="M25-12A28,28 0,0,1 28-2m-0.3,0l-1-2h2z" stroke-width="1" stroke-linejoin="round" stroke="#F00" fill="#F00"/>
    <circle r="2"/>
  </g>
</svg></div>
<pre class="code">import <a href="http://docs.python.org/lib/module-uuid.html">uuid</a>, <a href="http://docs.python.org/lib/module-rfc822.html">rfc822</a>
print rfc822.formatdate(uuid.uuid1().time/<a title="100ns&#x2192;s">10000000</a>-<a title="Gregorian&#x2192;Unix">12219292800</a>)</pre></div></content>
    <updated>2007-09-20T11:14:42-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2676</id>
    <link href="/blog/2007/09/20/Python-and-DB2"/>
    <link rel="replies" href="2676.atom" thr:count="0"/>
    <title>Python and DB2</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100">
  <defs>
    <linearGradient id="pyYellow" gradientTransform="rotate(45)">
      <stop stop-color="#fe5" offset="0.6"/>
      <stop stop-color="#da1" offset="1"/>
    </linearGradient>
    <linearGradient id="pyBlue" gradientTransform="rotate(45)">
      <stop stop-color="#69f" offset="0.4"/>
      <stop stop-color="#468" offset="1"/>
    </linearGradient>
  </defs>

  <path d="M27,16c0-7,9-13,24-13c15,0,23,6,23,13l0,22c0,7-5,12-11,12l-24,0c-8,0-14,6-14,15l0,10l-9,0c-8,0-13-9-13-24c0-14,5-23,13-23l35,0l0-3l-24,0l0-9l0,0z M88,50v1" fill="url(#pyBlue)"/>
  <path d="M74,87c0,7-8,13-23,13c-15,0-24-6-24-13l0-22c0-7,6-12,12-12l24,0c8,0,14-7,14-15l0-10l9,0c7,0,13,9,13,23c0,15-6,24-13,24l-35,0l0,3l23,0l0,9l0,0z M140,50v1" fill="url(#pyYellow)"/>

  <circle r="4" cx="64" cy="88" fill="#FFF"/>
  <circle r="4" cx="37" cy="15" fill="#FFF"/>
</svg></div>
<p><a href="http://antoniocangiano.com/2007/09/19/db2-on-mac/"><cite>Antonio Cangiano</cite></a>: <em>We now have a working Python driver for DB2 which is currently undergoing internal testing. The driver is similar to the Ruby and PHP ones, which means that you get an advanced and very easy to use API. It also means that if you are confident with the Ruby driver, you will be able to use the Python one in no time.</em></p>
<p>Oh, and Mac looks like it is coming too; but I don’t do Mac.</p></div></content>
    <updated>2007-09-20T09:03:49-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2675</id>
    <link href="/blog/2007/09/19/Securing-WordPress"/>
    <link rel="replies" href="2675.atom" thr:count="0"/>
    <title>Securing WordPress</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" stroke="#000" viewBox="0 0 100 100">
  <path d="M8,80s-5,8,5,9l78,0s9,0,5-9l-40-71s-4-6-8,0z" stroke-width="2" fill="#fff"/>
  <path d="M52,10 L10,85 L93,85z" stroke-width="2" stroke-linejoin="round" fill="#fc0"/>
  <path d="M52,32l0,26" stroke-width="9" stroke-linecap="round"/>
  <circle r="6" cx="52" cy="73"/>
</svg></div>
<a href="http://joseph.randomnetworks.com/archives/2007/09/19/http-basic-authentication-a-tale-of-atompub-wordpress-php-apache-cgi-and-ssltls/"><cite>Joseph Scott</cite></a>: <em>Hopefully everyone takes away two things from this. One, you can’t depend on HTTP basic authentication working. Two, if you aren’t using SSL/TLS then your traffic isn’t secure.</em></div></content>
    <updated>2007-09-19T22:27:51-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2674</id>
    <link href="/blog/2007/09/19/Joels-Strategy"/>
    <link rel="replies" href="2674.atom" thr:count="17" thr:updated="2007-09-24T18:45:42-04:00"/>
    <title>Joel's Strategy</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><a href="http://www.joelonsoftware.com/items/2007/09/18.html">Joel Spolsky</a>: <em>What’s going to happen? The winners are going to do what worked at Bell Labs in 1978: build a programming language, like C, that’s portable and efficient. It should compile down to “native” code (native code being JavaScript and DOMs) with different backends for different target platforms, where the compiler writers obsess about performance so you don’t have to. It’ll have all the same performance as native JavaScript with full access to the DOM in a consistent fashion, and it’ll compile down to IE native and Firefox native portably and automatically. And, yes, it’ll go into your CSS and muck around with it in some frightening but provably-correct way so you never have to think about CSS incompatibilities ever again. Ever. Oh joyous day that will be.</em></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <path d="M57,11c40-22,42-2,35,12c8-27-15-20-30-11z" fill="#47b"/>
  <path d="M36,56h56c4-60-83-60-86-6c13-16,26-26,36-30l-29,53c20,23,64,26,79-12h-30c0,14-26,12-25-5zM37,43c0-17,26-17,26,0zM39,89c-10,7-42,15-26-16l29-52c-15,6-36,40-37,48c-12,35,14,37,37,20" fill="#47b"/>
</svg></div>
<p><a href="http://www.joelonsoftware.com/items/2007/09/18.html"><cite>Joel Spolsky</cite></a>: <em>What’s going to happen? The winners are going to do what worked at Bell Labs in 1978: build a programming language, like C, that’s portable and efficient. It should compile down to “native” code (native code being JavaScript and DOMs) with different backends for different target platforms, where the compiler writers obsess about performance so you don’t have to. It’ll have all the same performance as native JavaScript with full access to the DOM in a consistent fashion, and it’ll compile down to IE native and Firefox native portably and automatically. And, yes, it’ll go into your CSS and muck around with it in some frightening but provably-correct way so you never have to think about CSS incompatibilities ever again. Ever. Oh joyous day that will be.</em></p>
<p>I can’t help but wonder why Joel and others didn't make greater use of <a href="http://dean.edwards.name/IE7/">Dean Edward’s IE7</a> at the time.  Possible reasons:</p>
<ul>
<li>Joel and others hadn’t heard of Dean’s efforts at the time, for whatever reason.</li>
<li>Browser incompatibility wasn’t so much of an issue in 2004-2005.  One way to look at this is that IE’s dominance at the time was substantial enough that developers could get away with requiring IE and the situation has changed enough that this merits revisiting.</li>
<li>Dean’s efforts were in the wrong direction... people prefer the APIs as Microsoft implements them.</li>
<li>Dean’s efforts were incomplete, or performed poorly, or was otherwise inadequate.</li>
<li>Dean’s IE7 was an all or nothing proposition.  It would modify the behavior of existing apps, which was unacceptable.</li>
<li>Applications worked nearly enough without the download that enough people wouldn’t make the effort, and the net result would be one additional platform to support.</li>
<li>Dean’s efforts, while interesting, didn’t have enough corporate backing to justify a company to depend on it.</li>
</ul>

<p>Possible solutions:</p>
<ul>
<li>Microsoft, Mozilla, and others work to eliminate their differences.  Joel discounts this possibility, and given the progress at <a href="http://www.whatwg.org/">WHATWG</a> and the <a href="http://www.w3.org/2007/03/HTML-WG-charter">W3C</a>, it is hard to argue with Joel’s assessment.  Microsoft has to walk a fine line between throwing its weight around and not showing up, and at the moment they seem to be consistently erring towards the latter.  Having a solid beta / tech preview would address this, but there is no indication that this is likely any time soon.</li>
<li>Something like <a href="http://silverlight.net/">Silverlight</a> comes along (coupled with <a href="http://www.mono-project.com/Moonlight">Moonlight</a>).  Such a solution doesn’t fix your CSS, it replaces many of the technologies that you are used to with new ones.  There are no indications that such a solution will ever be deployed on an iPhone.  Some have expressed concerns that once Silverlight gains enough tractions, the cooperation that Novell is currently seeing will dry up.</li>
<li>Something like <a href="http://weblogs.mozillazine.org/roadmap/archives/2007/07/new_projects.html">ScreamingMonkey</a> comes along and solves the JavaScript incompatibilities.  I see no indication that this plans to address DOM incompatibilities or CSS incompatibilities, either of which alone can be worse than JavaScript incompatibilities.</li>
</ul>

<p>Overall, I can’t see anything in any of these solutions that is clearly better than reviving Dean’s efforts, but I would be interested in hearing Joel’s take on this.</p></div></content>
    <updated>2007-09-19T18:24:11-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2673</id>
    <link href="/blog/2007/09/18/Introducing-Basura"/>
    <link rel="replies" href="2673.atom" thr:count="12" thr:updated="2007-09-24T12:15:21-04:00"/>
    <title>Introducing Basura</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>If Joe Gregorio can name his framework <a href="http://bitworking.org/news/Why_so_many_Python_web_frameworks">Robaccia</a>, I certainly can name my database <a href="http://intertwingly.net/code/basura/">Basura</a>.</p>
<p>Whereas Robaccia builds upon <del><a href="http://kid-templating.org/">Kid</a></del><ins><a href="http://genshi.edgewall.org/">Genshi</a></ins>, <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>, <a href="http://lukearno.com/projects/selector/">Selector</a>, and <a href="http://docs.python.org/lib/module-wsgiref.html">WSGI</a>; Basura builds upon <a href="http://docs.python.org/lib/module-bsddb.html">BSDDB</a>, <a href="http://www.json.org/">JSON</a>, and <a href="http://docs.python.org/lib/module-wsgiref.html">WSGI</a>.</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <circle stroke-width="12" r="43" cx="50" cy="50" fill="none" stroke="#3A5"/>
  <circle r="6" cx="59" cy="23" fill="#000"/>
  <g stroke-linejoin="round" stroke-linecap="round" stroke-width="1" stroke="#000" fill="none">
    <path d="M36,36c5,0,3,2,8-1c1,2,1,3,3,2c3,0-6,7-3,8c-4-2-9,2-14-2c4-3,4-4,5-7c5,0,8,2,12,1"/>
    <path fill="#000" d="M34,29h31c2,5,7,10,7,16l-8,1l8,1l-3,31l-5,-18l-11,18l5-34l-3-8z"/>
    <path stroke-width="2" d="M27,48h23M28,49h21l-3,28h-14l-4,-28h5l3,28h3v-28h5l-2,28m3-4h-13m-1-5h16m0-5h-16m-1-5h18m0-5h-19"/>
  </g>
  <path stroke="#F00" stroke-width="1"/>
</svg></div>
<p>If Joe Gregorio can name his framework <a href="http://bitworking.org/news/Why_so_many_Python_web_frameworks">Robaccia</a>, I certainly can name my database <a href="http://intertwingly.net/code/basura/">Basura</a>.</p>
<p>Whereas Robaccia builds upon <del><a href="http://kid-templating.org/">Kid</a></del><ins><a href="http://genshi.edgewall.org/">Genshi</a></ins>, <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>, <a href="http://lukearno.com/projects/selector/">Selector</a>, and <a href="http://docs.python.org/lib/module-wsgiref.html">WSGI</a>; Basura builds upon <a href="http://docs.python.org/lib/module-bsddb.html">BSDDB</a>, <a href="http://www.json.org/">JSON</a>, and <a href="http://docs.python.org/lib/module-wsgiref.html">WSGI</a>.</p>
<p>Just so that there isn’t any misunderstanding, my intent is <b>not</b> to build a full featured database, but rather to help understand and document the external interfaces of CouchDB.  In the process, hopefully I can make suggestions that will improve the consistency of this interface.  See my <a href="http://intertwingly.net/code/basura/NOTES">NOTES</a> for a start.  It is my hope that eventually there will be as many clients and servers implementing this interface as there are for XMPP.  Hopefully, once I get to parity with passing the CouchDB test cases, I can help <a href="http://damienkatz.net/2007/09/system_overload_1.html">offload Damien</a> by prototyping new features on a simpler codebase that he (and others) can then reimplement in a robust manner.</p>
<p>P.S. That <a href="http://intertwingly.net/code/basura/">basura link</a> above?  It is a <a href="http://bazaar-vcs.org/">bzr</a> repository... check it out!</p></div></content>
    <published>2007-09-18T11:50:44-04:00</published>
    <updated>2007-09-18T12:43:31-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2672</id>
    <link href="/blog/2007/09/18/MailCo"/>
    <link rel="replies" href="2672.atom" thr:count="3" thr:updated="2007-09-21T10:08:30-04:00"/>
    <title>MailCo</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:8.3125em; height:4.875em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 133 78">
  <path d="M23,72c-2,0-3,2-5,2c-1-2,2-4,2-7c-3,0-4,4-6,4c1-6,9-12,4-12c0,0-10,7-11,6c2-2,10-14,7-14c-1,0-7,4-9,4c0-2,9-10,10-11c2,0,3-2,2-3c-5,0-11,8-15,6l2-2c1-1,16-14,16-16c-3-2-13,6-18,6c22-24,38-33,47-35c7,0,14,2,21,3c0,3,12-1,13-1c5,0,9,4,11,8c0,1,0,2,0,4c3,11,31,7,35,19c0,5,1,9,2,14c-2,4-2,12-6,13c-4,1-4,1-4,1c-3,2-7,5-10,6c0,0-16-6-20-3c-12,4-16,8-19,20l-49-3"/>
  <path fill="#FFF" d="M86,22l-1-2h3v2h-2M83,19l-2,1l-1-2h2l1,1M122,57l-1-2c-1,0-1,1-3,1c0-1,0-3,0-4h2l1,2c1-1,2-1,3-1c1,1,1,2,0,3l-2,1M113,56c0-1,0-2,0-3c0-1,1-2,3-2c0,4,0,4-3,5M109,55c0-1-1-3,0-4h2c1,2,0,4-2,4M106,54l-2-2c-1,0-2,1-3,0c-1,0-1-2,0-4c1,0,2,0,3,1v2c1,0,2-1,3-1c1,0,0,2,0,3l-1,1M96,50c-2-1-1-2-1-4c2,0,3,0,4,2c-1,1-2,2-3,2"/>
  <path fill="#ED1C24" d="M40,75v-2c-2,0-9,2-9-2c0-2,5-8,3-8c-3-6-7-11-10-17c2-1,0-3,2-6c3-1,2,4,5,3c-4-17,5-22,5-22c-3,0-4,0-6,1c1-7,11-14,17-15c5-1,15-3,18,2c0,1-1,2-1,3c4,0,10-4,15-5c2-1,4-1,7,0l1,2c-7-3-17,3-23,6c-1,0-2,1-3,1l1,1c3,1,4,2,8,2c1,1,2,2,3,3c1,1,2,2,3,2c0-2,0-2-1-4c1-2-1-3,2-5c2,0,2,1,3,1c-4,4-2,8,10,9c1,0,3,1,3-2c-2,0-2-2-2-3l2,1c1,3,27,7,31,12c1,2,0,3-4,5c0,2,2,5,3,6l2-2l1,1c0,2,0,3,0,5v1c-1,0-2,0-3,0c-4-1-9-1-13-1c-11-5-25-16-36-20c-2-1-1-1-4-1c0,2,1,2,3,3c3,4,6,6,5,11l-1,2c-4,0-1-8-4-9c-10,8,5,25,13,20c-4-2-4-4-4-5c10,5,31,10,33,11c0,1-4,1-4,2c-5,1-13-2-17-4c-5-1-11,7-22,4c-2-1-13-8-15-8c0,4,9,12,11,13l0,2c-2,2-5,5-5,7"/>
  <path d="M80,24c3,1,11,4,9,5c-3,0-8,0-9-3v-2m-36-4l-2,2c0-1,1-3,1-3c3-6,9-8,14-7l0,1c-8,2-6,12-7,12c-2-1-3-5-6-5m0,34c0-6-8-17,3-22c1,0-2,15,7,19v2c-2,0-3,0-5,0c-1-2-1-1-2-1c0,2,1,5,1,7c-1-1-3-3-4-5m14-26c0-2-2-3,0-4c2,0,3-2,3-4c2,0,5,2,6,3c0,2-1,2-2,4c1,2,1,2,1,4h-1c-2,0-8-1-8,1c-2,0-3,0-5,0c-1-1,1-2,1-3c2,0,3-1,5-1"/>
</svg></div>
<a href="http://ascher.ca/blog/2007/09/17/joining-mozilla/"><cite>David Ascher</cite></a>: <em>As Mitchell Baker <a href="http://weblogs.mozillazine.org/mitchell/archives/2007/09/mozillas_new_focus_on_thunderb.html">just blogged</a>, and as a press release from Mozilla <a href="http://www.mozilla.com/en-US/press/mozilla-2007-09-17.html">will announce shortly</a>, I have taken on an exciting new role within the Mozilla world, leading a new organization focused on email and internet communications.  Wow indeed.</em></div></content>
    <updated>2007-09-18T11:08:58-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2671</id>
    <link href="/blog/2007/09/16/Media-Types-for-CouchDB-views"/>
    <link rel="replies" href="2671.atom" thr:count="6" thr:updated="2007-09-21T11:03:02-04:00"/>
    <title>Media Types for CouchDB views?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g stroke="#1c1308" stroke-width="1">
  <path d="M32,29l-11-1c-25-1-20,0-18,20c2,8,0,13,10,13z" fill="#53381a"/>
  <path d="M36,31h-11c-25-1-20,0-18,20c2,8,1,12,12,9z" fill="#8a5b28"/>
  <path d="M32,25c5-10,3-12,18-10c20,5,20,6,35,6c10,1,20,4,10,16l-11,20h-66z" fill="#454f2e"/>
  <path d="M13,53v7l45,18v-7zM32,25c5-10,3-12,15-8c20,6,10,6,31,6c10,1,18,4,10,16l-11,20l-56-9z" fill="#76894c"/>
  <path d="M13,53c-3-10,2-9,10-10c10-1,37,7,20,7c-12,1-12,0-12,10zM31,60c-2-14,13-8,20-10l7,3v18z" fill="#8e996c"/>
  <path d="M57,62c1,20,0,19,18,19c20,0,17,0,19-17c0-17-1-16-18-18c-20-1-19,0-19,16z" fill="#53381a"/>
  <path d="M60,64c1,20,0,19,18,19c20,0,17,0,19-17c0-17-1-16-18-18c-20-1-19,0-19,16z" fill="#8a5b28"/>
  </g>
</svg></div>
<p><a href="http://theexciter.com/articles/couchdb-views-in-ruby-instead-of-javascript"><cite>Johan Sørensen</cite></a>: <em>now you can query your CouchDb views in Ruby instead of Javascript</em></p>
<p><a href="http://jan.prima.de/~jan/plok/archives/93-CouchDb-Views-with-PHP.html">Jan Lehnardt</a>: <em>As I mentioned in the <a href="http://jan.prima.de/~jan/plok/archives/89-CouchDb-updates.html">Post Scriptum of an earlier post</a>, JavaScript is not the only language that you can create CouchDB views with. You can now use PHP, too.</em></p>
<p>Question: instead of Couch.ini specifying the one and only language that views can be written in for this server, could views instead have a media type?</p></div></content>
    <updated>2007-09-16T09:49:01-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2670</id>
    <link href="/blog/2007/09/15/DD-WRT-FOU"/>
    <link rel="replies" href="2670.atom" thr:count="3" thr:updated="2007-09-16T15:44:35-04:00"/>
    <title>DD WRT FOU</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <path d="M42,95L50,25L58,95Z" fill="#3C3" stroke="none"/>
  <path d="M39,20a15,15 0,0,0 0,20 M28,10a30,30 0,0,0 0,40 M61,20a15,15 0,0,1 0,20 M72,10a30,30 0,0,1 0,40" stroke="#3C3" fill="none" stroke-width="5" stroke-linecap="round"/>
</svg></div>
<p><a href="http://www.dd-wrt.com/">Sebastian Gostchall</a>: [dd-wrt] <em>RC3 out now — The most interesting news might be that the WRT54G v8 and the WRT54GS v7 is now fully supported</em></p>
<p>This just <a href="http://intertwingly.net/blog/2007/09/13/Implementing-an-Internet-Curfew">days after I bought</a> a v7 WRT54GS.  Some may remember <a href="http://www.dd-wrt.com/wiki/index.php?title=DD-WRT_Docu_(EN)">dd-wrt</a> as the software that <a href="http://lifehacker.com/software/router/hack-attack-turn-your-60-router-into-a-600-router-178132.php">turns your $60 router into a $600 router</a>.</p>
<p>Apparently, this GPL software has a <a href="http://www.bitsum.com/about-ddwrt.htm">Field Of Use restrictions</a>.  Sigh.</p></div></content>
    <updated>2007-09-15T22:24:01-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2669</id>
    <link href="/blog/2007/09/15/One-More-Step-Forward"/>
    <link rel="replies" href="2669.atom" thr:count="63" thr:updated="2007-09-20T06:52:49-04:00"/>
    <title>One More Step Forward?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://www.tbray.org/ongoing/When/200x/2007/09/14/Lousy-Aggregators">Tim Bray</a>: <em>I’m going to have to go back and patch up the code so it doesn’t emit any of those nasty colons and relative URI references that apparently hurt implementors’ fragile feelings.</em></p>
<p>As Tim continues to update his post with more and more aggregators that already <b>do</b> support these features, I’m gaining hope that some day I can retire the following Feed Vaidator message: <a href="http://feedvalidator.org/docs/warning/AvoidNamespacePrefix.html">Avoid Namespace Prefix</a>.</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" stroke-width="2" viewBox="-52 -53 100 100">
 <g fill="none">
  <ellipse stroke="#66899a" rx="6" ry="44"/>
  <ellipse stroke="#e1d85d" rx="6" ry="44" transform="rotate(-66)"/>
  <ellipse stroke="#80a3cf" rx="6" ry="44" transform="rotate(66)"/>
  <circle  stroke="#4b541f" r="44"/>
 </g>
 <g fill="#66899a" stroke="white">
  <circle fill="#80a3cf" r="13"/>
  <circle cy="-44" r="9"/>
  <circle cx="-40" cy="18" r="9"/>
  <circle cx="40" cy="18" r="9"/>
 </g>
</svg></div>
<p><a href="http://www.tbray.org/ongoing/When/200x/2007/09/14/Lousy-Aggregators"><cite>Tim Bray</cite></a>: <em>I’m going to have to go back and patch up the code so it doesn’t emit any of those nasty colons and relative URI references that apparently hurt implementors’ fragile feelings.</em></p>
<p>As Tim continues to update his post with more and more aggregators that already <b>do</b> support these features, I’m gaining hope that some day I can retire the following Feed Vaidator message: <a href="http://feedvalidator.org/docs/warning/AvoidNamespacePrefix.html">Avoid Namespace Prefix</a>.  Initial testing indicates that Firefox and IE (and presumably, therefore, Thunderbird and all tools based on the Windows RSS Platform) are both in the “good” column here.  Unfortunately, it looks like Opera isn’t.  Furthermore, at least one of the tools in the “bad” column already has a fix in beta, and at least one other tool doesn’t have the namespace prefix problem.  Those that wish to do so are welcome to reference the tests mentioned on the <a href="http://intertwingly.net/wiki/pie/XmlNamespaceConformanceTests">XML Namespace Conformance Tests</a> wiki page, and are invited to update that page with up-to-date results.</p>
<p>With the potential retirement of that one warning message comes the need for another: <a href="http://feedvalidator.org/docs/warning/RelativeSelf.html">Relative href value on self link</a>.  Note that this message only occurs if the self link is relative <b>and</b> there is no absolute <code>xml:base</code> attribute value on either the <code>link</code> element or the enclosing <code>feed</code> element.  Tim’s ongoing feed, for example, continues to <a href="http://feedvalidator.org/check.cgi?url=http%3A%2F%2Fwww.tbray.org%2Fongoing%2Fongoing.atom">validate with no warnings</a>.</p></div></content>
    <updated>2007-09-15T22:05:10-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2668</id>
    <link href="/blog/2007/09/14/ASCII-ISO-8859-1-UCS-and-Erlang"/>
    <link rel="replies" href="2668.atom" thr:count="4" thr:updated="2007-09-21T20:45:15-04:00"/>
    <title>ASCII, ISO-8859-1, UCS, and Erlang</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://www.lshift.net/blog/2007/09/13/how-should-json-strings-be-represented-in-erlang">Tony Garnock-Jones</a>: <em>Erlang represents strings as lists of (ASCII, or possibly iso8859-1) codepoints. In this regard, it’s weakly typed - there’s no hard distinction between a string, “ABC”, and a list of small integers, [65,66,67]</em></p>
<p>It is important to realize that Erlang was invented (in 1987) before utf-8 was (in 1992).</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:7.1875em; height:5.4375em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 115 87">
  <path d="M0,1v83h26c-10,0-22-11-22-21v-62zM22,1v53c0,16,22,16,22,0v-53zM41,84c10,0,22-11,22-21v-22l27,43zM60,1h30v20h19v-20h5v84h-5v-56h-19v18z" fill="#C60025"/>
</svg></div>
<p><a href="http://www.lshift.net/blog/2007/09/13/how-should-json-strings-be-represented-in-erlang"><cite>Tony Garnock-Jones</cite></a>: <em>Erlang represents strings as lists of (ASCII, or possibly iso8859-1) codepoints. In this regard, it’s weakly typed - there’s no hard distinction between a string, “ABC”, and a list of small integers, [65,66,67].</em></p>
<p>It is important to realize that Erlang was invented (in 1987) before utf-8 was (in 1992).</p>
<h3 id="codepoints">Codepoints</h3>
<p>Let’s explore the relationship between <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a>, <a href="http://en.wikipedia.org/wiki/ISO_8859-1">ISO-8859-1</a>, and <a href="http://en.wikipedia.org/wiki/Universal_Character_Set">UCS</a> (a.k.a. Unicode), by way of example.</p>
<p>First, let’s look at <a href="http://www.fileformat.info/info/unicode/char/0043/index.htm">U+0043</a>: Latin capital letter C.  The codepoint for this character in UCS is 67 decimal.  The codepoint for this character in ISO-8859-1 is 67 decimal.  The codepoint for this character in ASCII is 67 decimal.</p>
<p>Next, let’s take a look at <a href="http://www.fileformat.info/info/unicode/char/00C7/index.htm">U+00C7</a>: Latin capital letter C with cedilla.  The codepoint for this character in UCS is 199 decimal.  The codepoint for this character in ISO-8859-1 is 199 decimal.  This character can’t be represented in ASCII.</p>
<p>Finally, let’s look at <a href="http://www.fileformat.info/info/unicode/char/0421/index.htm">U+0421</a>: Cyrillic capital letter <a href="http://en.wikipedia.org/wiki/Es_(Cyrillic)">Es</a>.  The codepoint for this character is 1057 decimal.  This character can’t be represented in either ASCII or ISO-8859-1.</p>
<p>Given no other information, I would suggest that a string in Erlang be treated a list of UCS codepoints, where UCS is a proper superset of ISO-8859-1, which in turn is a proper superset of ASCII.</p>
<h3 id="binary">Binary</h3>
<p>As of Unicode 5.0.0, 102,012 code points are defined.  This number is a bit larger than 256, which is the number of possible values that can be stored in a byte.  So, in general, UCS codepoints will require more than one byte to be represented.</p>
<p>ASCII is simple.  Everything is stored in one byte.  A bit incomplete, but simple.</p>
<p>ISO-8859-1 is simple.  Everything is stores in one byte.  A bit incomplete (but not as incomplete as ASCII), but still simple.</p>
<p>UTF-32 is simple.  Everything gets 32 bits.  A bit wasteful, but simple.</p>
<p>UTF-16 is nearly as simple.  Code points less that 65,536 are stored as two bytes.  Everything else is stored as four.  This works as the range of UCS isn’t contiguous, in particular, the range of U+D800 to U+DFFF is reserved for “surrogate characters”.</p>
<p>Be forewarned that there actually are two version of UTF-32 and UTF-16, depending on whether your machine is <a href="http://en.wikipedia.org/wiki/Endianness">big endian or little endian</a>.</p>
<p>UTF-8 is simple for those characters which it shares with ASCII.  Those characters require only one byte.  Everything else requires more than one byte.  So a Latin capital letter C is 0x43 in UTF-8.  A Latin capital letter C with cedilla is 0xC387.  A Cyrillic capital letter Es is 0xD0A1.  One important aspect of UTF-8 is that it is rare that a given sequence of bytes which contains at least one non-ASCII character can be interpreted as a UTF-8 character.</p>
<p>For this reason, I would suggest that an RFC 4267 JSON codec for Erlang that choses to represent strings as binary make the assumption that binary sequences are UTF-8; and furthermore that those bytes that can not be interpreted as UTF-8 be treated as ISO-8859-1.  That sounds complicated, but that’s exactly what <a href="http://intertwingly.net/stories/2007/09/05/rfc4627.diff">this patch</a> does, i.e., if the next two, three, or four bytes match one of the utf-8 patterns, then those bytes are treated as a single character, otherwise that one byte is treated as a single character.</p>
<p>If this approach is taken, all ASCII binary streams will be interpreted corrected, as will all UTF-8 binary streams.  As a bonus: nearly all ISO-8859-1 binary streams will be too.</p>
<h3 id="converting">Converting a string to binary in Erlang</h3>
<p>Converting a UCS string to binary can be done with <code>list_to_binary(xmerl_ucs:to_utf8(Value))</code>.  This pair of function calls will work for all positive integers which represent valid Unicode codepoints, including all codepoints that may be defined in the foreseeable future (and, yes, from time to time, new characters are added).</p>
<p>Converting an ISO-8859-1 string to binary can be done with <code>list_to_binary(Value)</code>.  This function call will fail if it encounters an element of the list which is greater that 256.  This call will result in a same binary representation as the previous call for all codepoints less than 128.  It will result in a different binary representation than the previous call for all codepoints greater than 127.</p>
<p>Converting an ASCII string to binary can be done with either of the above two methods.</p>
<h3 id="footnotes">Footnotes</h3>
<p>For completeness, there are two other things that may be worth exploring.  Neither require much in the way of code, merely a few additional patterns to be matched.</p>
<ul>
<li><p>Unicode reserves a single character (zero-width no-break space) as a <a href="http://en.wikipedia.org/wiki/Byte_Order_Mark">Byte Order Mark</a>.  By matching a specific value against the first two, three, or four bytes of a binary stream, you can determine if the rest of the stream is UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, or UTF-32LE.</p></li>
<li><p>There are <a href="http://www.intertwingly.net/stories/2004/04/14/i18n.html#CleaningWindows">27 characters</a> which are often mis-encoded on Windows machines.  These patterns are easy to look for and correct.  I previously provided a <a href="http://intertwingly.net/blog/2005/09/28/XML-Cleansing">similar function for Ruby</a> which Jim Weirich picked up and included in Ruby’s <a href="http://rubyforge.org/projects/builder/">XML Builder</a>.</p></li>
</ul>

<p>Tony, if you are interested in pursuing any of these ideas in <a href="http://www.lshift.net/blog/2007/02/17/json-and-json-rpc-for-erlang">rfc4627.erl</a>, I can provide test cases and/or patches.  Let me know.</p></div></content>
    <updated>2007-09-14T09:02:05-04:00</updated>
  </entry>

  <entry>
    <id>tag:intertwingly.net,2004:2667</id>
    <link href="/blog/2007/09/13/Planet-Pruning"/>
    <link rel="replies" href="2667.atom" thr:count="21" thr:updated="2007-09-27T15:15:21-04:00"/>
    <title>Planet Pruning</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="http://philwilson.org/blog/2007/09/dangers-of-relying-on-others.html">Phil Wilson</a>: <em>Since I am too lazy to manage my own subscriptions, I was subscribed to <a href="http://planet.intertwingly.net/">Planet Intertwingly</a>. At 269 feeds though, the signal/noise ratio has taken a bad hit (what do you mean Sam doesn’t tailor his blogroll for me personally?) and I’m going to have to actually import the <a href="http://planet.intertwingly.net/opml.xml">OPML</a> and weed out stuff I’m not interested in. How annoying.</em></p>
<p>The issue isn’t the number of feeds, but the number of entries.  And some of the people I subscribe to talk a lot, so it is time to prune.  To help with this task, I wrote a <a href="http://intertwingly.net/stories/2007/09/13/chatterboxes.rb">little script</a>.</p></div></summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div style="width:6.25em; height:6.25em; float:right"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <defs xmlns:xl="http://www.w3.org/1999/xlink">
    <radialGradient id="s1" fx=".4" fy=".2" r=".7">
      <stop stop-color="#FE8"/><stop stop-color="#D70" offset="1"/>
    </radialGradient>
    <radialGradient id="s2" fx=".8" fy=".5" xl:href="#s1"/>
    <radialGradient id="s3" fx=".5" fy=".9" xl:href="#s1"/>
    <radialGradient id="s4" fx=".1" fy=".5" xl:href="#s1"/>
  </defs>
  <g stroke="#940">
    <path d="M73,29c-37-40-62-24-52,4l6-7c-8-16,7-26,42,9z" fill="url(#s1)"/>
    <path d="M47,8c33-16,48,21,9,47l-6-5c38-27,20-44,5-37z" fill="url(#s2)"/>
    <path d="M77,32c22,30,10,57-39,51l-1-8c3,3,67,5,36-36z" fill="url(#s3)"/>
    <path d="M58,84c-4,20-38-4-8-24l-6-5c-36,43,15,56,23,27z" fill="url(#s4)"/>
    <path d="M40,14c-40,37-37,52-9,68l1-8c-16-13-29-21,16-56z" fill="url(#s1)"/>
    <path d="M31,33c19,23,20,7,35,41l-9,1.7c-4-19-8-14-31-37z" fill="url(#s2)"/>
  </g>
</svg></div>
<p><a href="http://philwilson.org/blog/2007/09/dangers-of-relying-on-others.html"><cite>Phil Wilson</cite></a>: <em>Since I am too lazy to manage my own subscriptions, I was subscribed to <a href="http://planet.intertwingly.net/">Planet Intertwingly</a>. At 269 feeds though, the signal/noise ratio has taken a bad hit (what do you mean Sam doesn’t tailor his blogroll for me personally?) and I’m going to have to actually import the <a href="http://planet.intertwingly.net/opml.xml">OPML</a> and weed out stuff I’m not interested in. How annoying.</em></p>
<p>The issue isn’t the number of feeds, but the number of entries.  And some of the people I subscribe to talk a lot, so it is time to prune.  To help with this task, I wrote a <a href="http://intertwingly.net/stories/2007/09/13/chatterboxes.rb">little script</a>.</p>
<p>So, fair warning.  If you are subscribed to Planet Intertwingly and would like to keep seeing entries from some of the <span style="font-size:150%">big names</span> you see on <a href="http://planet.intertwingly.net/author-cloud.html">this page</a>, you might want to subscribe to those feeds separately.  Unless, of course, you are using <a href="http://eternusuk.blogspot.com/2007/07/google-reader-bug-report-use-atom.html">Google Reader</a>, in which case perhaps you shouldn’t be.</p></div></content>
    <updated>2007-09-13T14:44:51-04:00</updated>
  </entry>

</feed>

