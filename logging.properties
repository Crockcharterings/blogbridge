############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.
# For example java -Djava.util.logging.config.file=myfile
#
# Reminder of the levels:
# SEVERE (highest value) - Severe error. Something is really broken. Most likely a bug. 
# BB will attempt to continue and recover, but this may not work. 
#
# WARNING - Less important, but still an error - a true error, indicating a bug or a problem, 
# but recovery is possible and will most likely work. 
#
# INFO - Straight informational messages. Some condition which is 'surprising' and we would like 
# to see in the log even though it is not an error. That is the key: is it surprising 
# enough that we want to see it in the log despite the fact that it's not an error.
#
# CONFIG - Configuration, setup etc messages. Routine information about initialization, 
# configurations, setups etc. Normally will not be displayed in log. So can be voluminous.
#
# FINE - Fine Tracing messages. Pure debugging info. Never useful in production
#
# FINER - Pure debugging info. Never useful in production. Finer.
#
# FINEST (lowest value) - Pure debugging info. Never useful in production. Finest grain.
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.ConsoleHandler, java.util.logging.FileHandler,

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level=INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = blogbridge.log
#java.util.logging.FileHandler.limit = 50000
#java.util.logging.FileHandler.count = 1
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
#java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Limit the message that are printed on the console to INFO and above.
#java.util.logging.ConsoleHandler.level = FINER
#java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter=com.salas.bb.utils.TinyFormatter

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# Internal modules
com.salas.bb.utils.MigrationManager.level = FINEST
com.salas.bb.utils.ConnectionChecker.level = CONFIG

# EDT Watchdogs
com.salas.bb.core.actions.EDTLockupHandler.level = SEVERE
com.salas.bb.core.actions.EDTOverloadReporter.level = WARNING

com.salas.bb.persistence.backend.level = FINE

com.salas.bb.updates.level = FINE

# Debugging
com.salas.bb.discovery.MDDiscoveryLogic.level = FINE
com.salas.bb.persistence.backend.HsqlFeedsPM.level = FINE
com.salas.bb.service.ServerService.level = SEVERE